[["presence-absence-data.html", "Chapter 2 Presence-absence data 2.1 Download presence data 2.2 Create pseudo-absence data", " Chapter 2 Presence-absence data In this chapter we first, download occurrence data from global open-access datasets such as Global Biodiversity Information Facility (GBIF, https://www.gbif.org/) and Ocean Biodiversity Information System (OBIS, https://obis.org/); second, clean downloaded data reformating, renaming fields and removing outliers data; and lastly, we generate a set of pseudoabsence points along our study area. First we load a list of required libraries. requiredPackages &lt;- c( #GENERAL USE LIBRARIES --------# &quot;here&quot;, # Library for reproducible workflow &quot;rstudioapi&quot;, # Library for reproducible workflow &quot;maptools&quot;, #plotting world map &quot;ggplot2&quot;, #for plotting #Presence-absence data chapter--------# &quot;robis&quot;, # Specific library to get the occurrence data &quot;rgbif&quot;,# Specific library to get the occurrence data &quot;CoordinateCleaner&quot;, #to remove outlier &quot;rgdal&quot;, # to work with Spatial data &quot;sf&quot;, # to work with spatial data (shapefiles) &quot;data.table&quot;, #for reading data, &quot;dplyr&quot;, #for reading data, &quot;tidyr&quot;, #for reading data &quot;marmap&quot; #bathymetry getNOAA.bathy remotes::install_github(&quot;ericpante/marmap&quot;) ) We run a function to install the required packages that are not in our system and load all the required packages. install_load_function &lt;- function(pkg){ new.pkg &lt;- pkg[!(pkg %in% installed.packages()[, &quot;Package&quot;])] if (length(new.pkg)) install.packages(new.pkg, dependencies = TRUE) sapply(pkg, require, character.only = TRUE) } install_load_function(requiredPackages) ## here rstudioapi maptools ggplot2 ## TRUE TRUE TRUE TRUE ## robis rgbif CoordinateCleaner rgdal ## TRUE TRUE TRUE TRUE ## sf data.table dplyr tidyr ## TRUE TRUE TRUE TRUE ## marmap ## TRUE We define some overall settings. # Location of script setwd(dirname(getSourceEditorContext()$path)) # General settings for ggplot (black-white background, larger base_size) theme_set(theme_bw(base_size = 16)) 2.1 Download presence data In this section we download presence data from global public datasets. To do so, we first define our study area, in this case we select the Atlantic ocean based on the The Food and Agriculture Organization (FAO) Major Fishing Areas for Statistical Purposes and we remove Black sea subarea. # url where FAO shapfile is stored url&lt;-&quot;https://www.fao.org/fishery/geoserver/area/ows?service=WFS&amp;version=1.0.0&amp;request=GetFeature&amp;typeName=area%3AFAO_AREAS&amp;maxFeatures=50&amp;outputFormat=SHAPE-ZIP&quot; # Download file download.file(url,&quot;data/spatial/FAO_AREAS.zip&quot;,mode=&quot;wb&quot;) # Unzip downloaded file unzip(&quot;data/spatial/FAO_AREAS.zip&quot;,exdir=&quot;data/spatial&quot;) # Load FAO (spatial multipolygon) FAO&lt;- st_read(file.path(&quot;data&quot;, &quot;spatial&quot;, &quot;FAO_AREAS.shp&quot;)) ## Reading layer `FAO_AREAS&#39; from data source ## `D:\\PROJECTS\\github\\SDM\\data\\spatial\\FAO_AREAS.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 50 features and 15 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -180 ymin: -85.58276 xmax: 180 ymax: 89.99 ## Geodetic CRS: WGS 84 # Select Atlantic Ocean FAO Area FAO_Atl &lt;- FAO[FAO$OCEAN==&quot;Atlantic&quot;,] # Select Black sea subarea Black_Sea &lt;- FAO_Atl[FAO_Atl$ID==&quot;20&quot;,] # Transform to sf objects FAO_Atl.sf &lt;- st_as_sf(FAO_Atl) Black_Sea.sf &lt;- st_as_sf(Black_Sea) # Remove Black sea using st_difference (reverse of st_intersection) FAO_Atl_no_black_sea &lt;- st_difference(FAO_Atl.sf,Black_Sea.sf) %&gt;% dplyr::select (F_AREA) # Transform to spatial polygons dataframe study_area&lt;- sf:::as_Spatial(FAO_Atl_no_black_sea) plot(study_area) # Remove unused files rm(FAO, FAO_Atl, FAO_Atl.sf, FAO_Atl_no_black_sea, Black_Sea, Black_Sea.sf) Download occurrence data from OBIS and GBIF using scientific name. In this case we select Albacore tuna species (Thunnus alalunga). # Get data from OBIS #mydata.obis&lt;-robis::occurrence(scientificname=&quot;Thunnus alalunga&quot;) #save(mydata.obis, file=file.path(&quot;data&quot;,&quot;occurrences&quot;,file=&quot;mydata.obis.RData&quot;)) load(&quot;data/occurrences/mydata.obis.RData&quot;) # Get data from GBIF #mydata.gbif&lt;-occ_data(scientificName=&quot;Thunnus alalunga&quot;, hasCoordinate = TRUE, limit=100000)$data #save(mydata.gbif,file=file.path(&quot;data&quot;,&quot;occurrences&quot;,file=&quot;mydata.gbif.RData&quot;)) load(&quot;data/occurrences/mydata.gbif.RData&quot;) We now check the downloaded data and select the fields of interest. # Check names for GBIF data names(mydata.gbif) ## [1] &quot;key&quot; &quot;scientificName&quot; ## [3] &quot;decimalLatitude&quot; &quot;decimalLongitude&quot; ## [5] &quot;issues&quot; &quot;datasetKey&quot; ## [7] &quot;publishingOrgKey&quot; &quot;installationKey&quot; ## [9] &quot;publishingCountry&quot; &quot;protocol&quot; ## [11] &quot;lastCrawled&quot; &quot;lastParsed&quot; ## [13] &quot;crawlId&quot; &quot;hostingOrganizationKey&quot; ## [15] &quot;basisOfRecord&quot; &quot;occurrenceStatus&quot; ## [17] &quot;taxonKey&quot; &quot;kingdomKey&quot; ## [19] &quot;phylumKey&quot; &quot;orderKey&quot; ## [21] &quot;familyKey&quot; &quot;genusKey&quot; ## [23] &quot;speciesKey&quot; &quot;acceptedTaxonKey&quot; ## [25] &quot;acceptedScientificName&quot; &quot;kingdom&quot; ## [27] &quot;phylum&quot; &quot;order&quot; ## [29] &quot;family&quot; &quot;genus&quot; ## [31] &quot;species&quot; &quot;genericName&quot; ## [33] &quot;specificEpithet&quot; &quot;taxonRank&quot; ## [35] &quot;taxonomicStatus&quot; &quot;iucnRedListCategory&quot; ## [37] &quot;dateIdentified&quot; &quot;coordinateUncertaintyInMeters&quot; ## [39] &quot;year&quot; &quot;month&quot; ## [41] &quot;day&quot; &quot;eventDate&quot; ## [43] &quot;modified&quot; &quot;lastInterpreted&quot; ## [45] &quot;references&quot; &quot;license&quot; ## [47] &quot;isInCluster&quot; &quot;datasetName&quot; ## [49] &quot;recordedBy&quot; &quot;identifiedBy&quot; ## [51] &quot;geodeticDatum&quot; &quot;countryCode&quot; ## [53] &quot;country&quot; &quot;rightsHolder&quot; ## [55] &quot;identifier&quot; &quot;http://unknown.org/nick&quot; ## [57] &quot;informationWithheld&quot; &quot;verbatimEventDate&quot; ## [59] &quot;collectionCode&quot; &quot;gbifID&quot; ## [61] &quot;occurrenceID&quot; &quot;taxonID&quot; ## [63] &quot;catalogNumber&quot; &quot;institutionCode&quot; ## [65] &quot;eventTime&quot; &quot;http://unknown.org/captive&quot; ## [67] &quot;identificationID&quot; &quot;continent&quot; ## [69] &quot;stateProvince&quot; &quot;verbatimLocality&quot; ## [71] &quot;occurrenceRemarks&quot; &quot;lifeStage&quot; ## [73] &quot;datasetID&quot; &quot;eventID&quot; ## [75] &quot;footprintWKT&quot; &quot;originalNameUsage&quot; ## [77] &quot;county&quot; &quot;identificationVerificationStatus&quot; ## [79] &quot;nameAccordingTo&quot; &quot;networkKeys&quot; ## [81] &quot;individualCount&quot; &quot;elevation&quot; ## [83] &quot;waterBody&quot; &quot;institutionKey&quot; ## [85] &quot;otherCatalogNumbers&quot; &quot;preparations&quot; ## [87] &quot;recordNumber&quot; &quot;acceptedNameUsage&quot; ## [89] &quot;vernacularName&quot; &quot;institutionID&quot; ## [91] &quot;language&quot; &quot;type&quot; ## [93] &quot;identificationRemarks&quot; &quot;projectId&quot; ## [95] &quot;municipality&quot; &quot;collectionKey&quot; ## [97] &quot;higherGeography&quot; &quot;georeferenceProtocol&quot; ## [99] &quot;island&quot; &quot;endDayOfYear&quot; ## [101] &quot;locality&quot; &quot;fieldNumber&quot; ## [103] &quot;startDayOfYear&quot; &quot;collectionID&quot; ## [105] &quot;higherClassification&quot; &quot;materialSampleID&quot; ## [107] &quot;disposition&quot; &quot;programmeAcronym&quot; ## [109] &quot;organismQuantity&quot; &quot;organismQuantityType&quot; ## [111] &quot;samplingProtocol&quot; &quot;locationAccordingTo&quot; ## [113] &quot;coordinatePrecision&quot; &quot;georeferencedDate&quot; ## [115] &quot;nomenclaturalCode&quot; &quot;associatedReferences&quot; ## [117] &quot;taxonRemarks&quot; &quot;ownerInstitutionCode&quot; ## [119] &quot;bibliographicCitation&quot; &quot;habitat&quot; ## [121] &quot;locationRemarks&quot; &quot;depth&quot; ## [123] &quot;http://unknown.org/license&quot; &quot;taxonConceptID&quot; ## [125] &quot;http://unknown.org/rightsHolder&quot; &quot;depthAccuracy&quot; ## [127] &quot;dynamicProperties&quot; &quot;elevationAccuracy&quot; ## [129] &quot;rights&quot; &quot;georeferenceSources&quot; ## [131] &quot;georeferenceRemarks&quot; &quot;name&quot; ## [133] &quot;associatedSequences&quot; &quot;establishmentMeans&quot; ## [135] &quot;georeferenceVerificationStatus&quot; &quot;accessRights&quot; ## [137] &quot;georeferencedBy&quot; &quot;verbatimSRS&quot; ## [139] &quot;previousIdentifications&quot; &quot;locationID&quot; ## [141] &quot;acceptedNameUsageID&quot; &quot;http://unknown.org/language&quot; ## [143] &quot;http://unknown.org/modified&quot; &quot;samplingEffort&quot; ## [145] &quot;verbatimDepth&quot; &quot;behavior&quot; ## [147] &quot;eventRemarks&quot; &quot;footprintSRS&quot; ## [149] &quot;namePublishedInYear&quot; &quot;verbatimCoordinateSystem&quot; ## [151] &quot;parentNameUsage&quot; &quot;http://unknown.org/taxonRankID&quot; ## [153] &quot;http://unknown.org/species&quot; &quot;higherGeographyID&quot; ## [155] &quot;islandGroup&quot; &quot;organismID&quot; ## [157] &quot;distanceFromCentroidInMeters&quot; &quot;http://unknown.org/orders&quot; ## [159] &quot;typeStatus&quot; # Select columns of interest mydata.gbif &lt;- mydata.gbif %&gt;% dplyr::select(&quot;acceptedScientificName&quot;, &quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;, &quot;year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;eventDate&quot;, &quot;depth&quot;) # Check names in for OBIS data names(mydata.obis) ## [1] &quot;infraphylum&quot; &quot;country&quot; ## [3] &quot;date_year&quot; &quot;scientificNameID&quot; ## [5] &quot;year&quot; &quot;scientificName&quot; ## [7] &quot;dropped&quot; &quot;gigaclassid&quot; ## [9] &quot;aphiaID&quot; &quot;decimalLatitude&quot; ## [11] &quot;subclassid&quot; &quot;gigaclass&quot; ## [13] &quot;infraphylumid&quot; &quot;phylumid&quot; ## [15] &quot;familyid&quot; &quot;catalogNumber&quot; ## [17] &quot;basisOfRecord&quot; &quot;terrestrial&quot; ## [19] &quot;id&quot; &quot;day&quot; ## [21] &quot;parvphylum&quot; &quot;order&quot; ## [23] &quot;dataset_id&quot; &quot;locality&quot; ## [25] &quot;decimalLongitude&quot; &quot;collectionCode&quot; ## [27] &quot;date_end&quot; &quot;speciesid&quot; ## [29] &quot;date_start&quot; &quot;month&quot; ## [31] &quot;genus&quot; &quot;eventDate&quot; ## [33] &quot;brackish&quot; &quot;absence&quot; ## [35] &quot;subfamily&quot; &quot;genusid&quot; ## [37] &quot;originalScientificName&quot; &quot;marine&quot; ## [39] &quot;subphylumid&quot; &quot;subfamilyid&quot; ## [41] &quot;institutionCode&quot; &quot;date_mid&quot; ## [43] &quot;class&quot; &quot;orderid&quot; ## [45] &quot;waterBody&quot; &quot;kingdom&quot; ## [47] &quot;classid&quot; &quot;phylum&quot; ## [49] &quot;species&quot; &quot;subphylum&quot; ## [51] &quot;subclass&quot; &quot;family&quot; ## [53] &quot;category&quot; &quot;kingdomid&quot; ## [55] &quot;parvphylumid&quot; &quot;node_id&quot; ## [57] &quot;flags&quot; &quot;sss&quot; ## [59] &quot;shoredistance&quot; &quot;sst&quot; ## [61] &quot;bathymetry&quot; &quot;maximumDepthInMeters&quot; ## [63] &quot;minimumDepthInMeters&quot; &quot;sex&quot; ## [65] &quot;depth&quot; &quot;coordinatePrecision&quot; ## [67] &quot;verbatimCoordinates&quot; &quot;occurrenceRemarks&quot; ## [69] &quot;individualCount&quot; &quot;occurrenceStatus&quot; ## [71] &quot;modified&quot; &quot;materialSampleID&quot; ## [73] &quot;occurrenceID&quot; &quot;scientificNameAuthorship&quot; ## [75] &quot;taxonRank&quot; &quot;datasetID&quot; ## [77] &quot;associatedReferences&quot; &quot;bibliographicCitation&quot; ## [79] &quot;coordinateUncertaintyInMeters&quot; &quot;vernacularName&quot; ## [81] &quot;footprintWKT&quot; &quot;specificEpithet&quot; ## [83] &quot;recordNumber&quot; &quot;georeferenceRemarks&quot; ## [85] &quot;stateProvince&quot; &quot;continent&quot; ## [87] &quot;recordedBy&quot; &quot;rightsHolder&quot; ## [89] &quot;language&quot; &quot;type&quot; ## [91] &quot;license&quot; &quot;ownerInstitutionCode&quot; ## [93] &quot;datasetName&quot; &quot;geodeticDatum&quot; ## [95] &quot;accessRights&quot; &quot;dynamicProperties&quot; ## [97] &quot;county&quot; &quot;samplingEffort&quot; ## [99] &quot;lifeStage&quot; &quot;footprintSRS&quot; ## [101] &quot;samplingProtocol&quot; &quot;parentEventID&quot; ## [103] &quot;eventID&quot; &quot;eventRemarks&quot; ## [105] &quot;identifiedBy&quot; &quot;georeferencedBy&quot; ## [107] &quot;minimumElevationInMeters&quot; &quot;maximumElevationInMeters&quot; ## [109] &quot;dateIdentified&quot; &quot;behavior&quot; ## [111] &quot;georeferenceProtocol&quot; &quot;verbatimDepth&quot; ## [113] &quot;organismQuantity&quot; &quot;organismQuantityType&quot; ## [115] &quot;startDayOfYear&quot; &quot;collectionID&quot; ## [117] &quot;typeStatus&quot; &quot;institutionID&quot; ## [119] &quot;acceptedNameUsage&quot; &quot;preparations&quot; ## [121] &quot;countryCode&quot; &quot;otherCatalogNumbers&quot; ## [123] &quot;references&quot; &quot;fieldNumber&quot; ## [125] &quot;endDayOfYear&quot; &quot;eventTime&quot; ## [127] &quot;locationID&quot; &quot;taxonRemarks&quot; ## [129] &quot;georeferencedDate&quot; &quot;verbatimEventDate&quot; ## [131] &quot;identificationRemarks&quot; &quot;nomenclaturalCode&quot; ## [133] &quot;taxonomicStatus&quot; &quot;higherClassification&quot; ## [135] &quot;higherGeography&quot; &quot;verbatimLatitude&quot; ## [137] &quot;verbatimLongitude&quot; &quot;establishmentMeans&quot; ## [139] &quot;verbatimLocality&quot; &quot;georeferenceVerificationStatus&quot; ## [141] &quot;island&quot; &quot;identificationQualifier&quot; ## [143] &quot;identificationID&quot; &quot;informationWithheld&quot; ## [145] &quot;islandGroup&quot; &quot;acceptedNameUsageID&quot; ## [147] &quot;locationRemarks&quot; &quot;verbatimSRS&quot; ## [149] &quot;previousIdentifications&quot; # Select columns of interest mydata.obis &lt;- mydata.obis %&gt;% dplyr::select(&quot;scientificName&quot;, &quot;decimalLongitude&quot;, &quot;decimalLatitude&quot;, &quot;date_year&quot;, &quot;month&quot;, &quot;day&quot;, &quot;eventDate&quot;, &quot;depth&quot;, &quot;bathymetry&quot;, &quot;occurrenceStatus&quot;, &quot;sst&quot;) Reformat the data adding a new field and renaming some columns from mydata.gbif dataframe in order to have the same columns and be able to join both downloaded datasets. mydata.gbif &lt;- mydata.gbif %&gt;% dplyr::rename(scientificName= &quot;acceptedScientificName&quot;) %&gt;% dplyr::rename(date_year = &quot;year&quot;) %&gt;% dplyr::mutate(bathymetry= NA) %&gt;% dplyr::mutate(occurrenceStatus=1) %&gt;% dplyr::mutate(sst= NA) # Join data from OBIS and GBIF mydata.fus&lt;-rbind(mydata.obis,mydata.gbif) # Assign unique scientific name mydata.fus &lt;- mydata.fus %&gt;% dplyr::mutate(scientificName= paste(mydata.obis$scientificName[1])) # Remove unused files rm(mydata.gbif, mydata.obis) We now clean downloaded raw data. # Give date format to eventDate and fill out month and date_year columns mydata.fus$eventDate &lt;- as.Date(mydata.fus$eventDate) mydata.fus$date_year &lt;- as.numeric(mydata.fus$date_year) mydata.fus$month &lt;- as.numeric(mydata.fus$month) # Mutate occurrenceStatus column giving value of 1 to presences and 0 to absences unique (mydata.fus$occurrenceStatus) ## [1] NA &quot;present&quot; &quot;P&quot; &quot;Present&quot; &quot;NA&quot; &quot;1&quot; mydata.fus &lt;- mydata.fus %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;NA&quot;, NA, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;Present&quot;, 1, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;present&quot;, 1, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;Presente&quot;, 1, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;Presence&quot;, 1, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;P&quot;, 1, occurrenceStatus)) %&gt;% mutate(occurrenceStatus = ifelse(occurrenceStatus== &quot;Q&quot;, 1, occurrenceStatus)) # Assign 1 value to all occurrences mydata.fus &lt;- mydata.fus %&gt;% dplyr::mutate(occurrenceStatus = 1) We remove outliers based on distance method (total distance= 1000 km). out.dist &lt;- cc_outl(x=mydata.fus, lon = &quot;decimalLongitude&quot;, lat = &quot;decimalLatitude&quot;, species = &quot;scientificName&quot;, method=&quot;distance&quot;, tdi=1000, # distance method with tdi=1000km thinning=T, thinning_res=0.5, value=&quot;flagged&quot;) # Remove outliers from the data mydata.fus &lt;- mydata.fus[out.dist, ] Remove duplicates. # First create a vector containing longitude, latitude and event date information date &lt;- cbind(mydata.fus$decimalLongitude,mydata.fus$decimalLatitude,mydata.fus$eventDate) # Remove the duplicated records mydata.fus&lt;-mydata.fus[!duplicated(date),] # Remove unused files rm(date) Mask retrieved occurrence data to our study area and add bathymetry value to each occurrence point. # Assign coordinate format and projection to be able to use FAO Atlantic as a mask dat &lt;- data.frame(cbind(mydata.fus$decimalLongitude,mydata.fus$decimalLatitude)) ptos&lt;-as.data.table(dat,keep.columnnames=TRUE) coordinates(ptos) &lt;- ~ X1 + X2 # Assign projection proj4string(ptos) &lt;-proj4string(study_area) # Select only occurrences from FAO Atlantic match2&lt;-data.frame(subset(mydata.fus,!is.na(over(ptos, study_area)[,1]))) # Extract the FAO area of each point match3&lt;-data.frame(subset(over(ptos, study_area), !is.na(over(ptos, study_area)[,1]))) # Create data frame with area, name, long, lat and year df0&lt;-cbind(F_AREA=match3$F_AREA,match2)[,c(&quot;F_AREA&quot;,&quot;scientificName&quot;,&quot;decimalLongitude&quot;,&quot;decimalLatitude&quot;,&quot;date_year&quot;,&quot;occurrenceStatus&quot;)] # Rename some columns names(df0)[3:5]&lt;-c(&quot;LON&quot;,&quot;LAT&quot;,&quot;YEAR&quot;) # Add bathymetry from NOAA #bathy &lt;- marmap::getNOAA.bathy(lon1=-100,lon2=30,lat1=-41,lat2=55, resolution = 1, keep=TRUE, antimeridian=FALSE, path= here::here(&quot;data&quot;, &quot;spatial&quot;)) load(&quot;data/spatial/bathy.RData&quot;) df0$bathymetry &lt;- get.depth(bathy, df0[,c(&quot;LON&quot;,&quot;LAT&quot;)], locator=F)$depth # Remove unused files rm(mydata.fus, match2, match3, dat, ptos) We plot the occurrence data. ggplot() + geom_path(data = study_area, aes(x = long, y = lat, group = group), color = &#39;gray&#39;, linewidth = .2) + geom_point(data=df0, aes(x=LON, y=LAT)) And, we save the data. save(df0, file = &quot;data/occurrences/occ.RData&quot;) save(study_area, file = &quot;data/spatial/total_area.RData&quot;) # Remove unused files rm(df0) 2.2 Create pseudo-absence data After saving presence data for the species of interest we need to generate absence data (with a constant prevalence of 50%, (McPHERSON, Jetz, and Rogers 2004),(Barbet-Massin et al. 2012)), in order to work with logistic regression SDM afterwards. For that, we generate a buffer around each presence data point, with a radius of 100km, where no absences can be generated. we load the requiered libraries. library(tidyverse) library(ggplot2) library(scales) library(here) library(ggridges) library(maps) # some basic country maps library(mapdata) # higher resolution maps library(mapproj) library(marmap) # access global topography data library(mapplots) # ices rectangles library(sf) library(gridExtra) library(lubridate) library(raster) We load the presence data and the object with the area of study. #occurrence data load(&quot;data/occurrences/occ.RData&quot;) #study area spatial polygon load(&quot;data/spatial/total_area.RData&quot;) Before starting the pseudo-absence generation process, we delete observations in land (positive bathymetry) and select data between 2000 and 2014 (same temporal range as the environmental data that we will load later). #remove points in land df0&lt;-subset(df0,bathymetry&lt;0) #use years from 2000 to 2014 df0&lt;- subset(df0, YEAR&lt;=2014 &amp; YEAR&gt;=2000) #use the whole saved area area &lt;- study_area Then we transform the presence data frame to “SpatialPointsDataFrame” class object and the to “sf” class object so we can operate and plot easily with spatial data. We can see the charaterstics of this object through its summary. #convert to spatial point data frame df&lt;-df0 ; coordinates(df)&lt;- ~LON+LAT crs(df)&lt;-crs(area) #convert to sf area.sf&lt;-st_union(st_as_sf(area)) df.sf&lt;-st_as_sf(df) summary(df) ## Object of class SpatialPointsDataFrame ## Coordinates: ## min max ## LON -95.65 24.45000 ## LAT -34.71 54.15014 ## Is projected: FALSE ## proj4string : [+proj=longlat +datum=WGS84 +no_defs] ## Number of points: 14903 ## Data attributes: ## F_AREA scientificName YEAR occurrenceStatus ## Length:14903 Length:14903 Min. :2000 Min. :1 ## Class :character Class :character 1st Qu.:2001 1st Qu.:1 ## Mode :character Mode :character Median :2002 Median :1 ## Mean :2003 Mean :1 ## 3rd Qu.:2004 3rd Qu.:1 ## Max. :2013 Max. :1 ## bathymetry ## Min. :-8404.09 ## 1st Qu.:-1916.92 ## Median :-1030.77 ## Mean :-1433.61 ## 3rd Qu.: -351.32 ## Max. : -1.13 We can easily plot sf objects using ggplot, here we plot the area of study and the presence data points. ggplot(area.sf) + geom_sf() + geom_sf(data=st_union(df.sf),size=0.05,alpha=0.5) We save a base plot (p0) with the world map and our area of study in blue. # basic ggplot global &lt;- map_data(&quot;worldHires&quot;) p0 &lt;- ggplot() + annotation_map(map=global, fill=&quot;grey&quot;)+ geom_sf(data=area.sf,fill=5) print(p0) In order to generate a buffer around each ocurrence data point, we need to work with euclidean distances, so first, we need to transform the decimal latitude and longitude values to UTM. # function to find your UTM. Taken from Nerea Goikoetxea lonlat2UTM = function(lonlat) { utm = (floor((lonlat[1] + 180) / 6) %% 60) + 1 if(lonlat[2] &gt; 0) { utm + 32600 } else{ utm + 32700 } } (EPSG_2_UTM &lt;- lonlat2UTM(c(mean(df$LON), mean(df$LAT)))) ## [1] 32623 # transform area and data points to UTMs (in m) aux &lt;- st_transform(area.sf, EPSG_2_UTM) df.sf.utm &lt;- st_transform(df.sf, EPSG_2_UTM) Now, we can create buffers of 100km around the points and join the resulting polygons. Then this buffer is intersected with the area of study defining the area where the pseudo-absences can be generated. To visualize the defined areas, we plot the buffers in red and the area that we will use to generate pseudo-absences in green. # create buffers of 100000m buffer &lt;- st_buffer(df.sf.utm, dist=100000) buffer &lt;- st_union(buffer) # intersect the are with the buffer aux0 &lt;- st_difference(aux, buffer) # ggplot for all data p0 +geom_sf(data=aux0,fill=3)+geom_sf(data=buffer,fill=2) #zoom p0 +geom_sf(data=aux0,fill=3)+geom_sf(data=buffer,fill=2)+ coord_sf(xlim=c(-95,-82), ylim=c(22,31)) We create a data frame for pseudo-absences with the same dimensions as the presences data frame. # Generate the pseudo-absence data frame pseudo &lt;- matrix(data=NA, nrow=dim(df0)[1], ncol=dim(df0)[2]) pseudo &lt;- data.frame(pseudo) names(pseudo) &lt;- names(df0) To generate the pseudo-absence data points, we sample randomly from the defined area and we extract their latitude and longitude to incorporate them in the created data frame. we set the occurceStatus equal to 0 as they are absences. # set the seed set.seed(1) #sample from the defined area rp.sf &lt;- st_sample(aux0, size=dim(df.sf.utm)[1], type=&quot;random&quot;) # randomly sample points # transform to lat and lon and extract coordinates as data.frame rp.sf &lt;- st_transform(rp.sf, 4326) rp &lt;- as.data.frame(st_coordinates(rp.sf)) pseudo$LON &lt;- rp$X pseudo$LAT &lt;- rp$Y # complete the rest of columns pseudo$scientificName &lt;- df0$scientificName pseudo$occurrenceStatus &lt;- 0 We can plot the generated pseudo-absence data (in pink) in the map, together with the presence data points (in black). p0 + geom_sf(data=rp.sf, col=6, shape=4,size=0.5)+ geom_sf(data=df.sf.utm, col=1, alpha=0.8,size=0.5)+ ggtitle(unique(df$scientificName)) #zoom p0 + geom_sf(data=rp.sf, col=6, shape=4,size=1)+ geom_sf(data=df.sf.utm, col=1, alpha=0.8,size=0.5)+ coord_sf(xlim=c(-95,-82), ylim=c(23,31))+ ggtitle(unique(df$scientificName)) Finally we join the presence and pseudo-absence data frames selecting the columns of interest and save the new data frame as well as the area object. # Join the two data sets and save the final dataset dat &lt;- rbind(df0, pseudo)[,c(&quot;scientificName&quot;,&quot;LON&quot;,&quot;LAT&quot;,&quot;YEAR&quot;,&quot;occurrenceStatus&quot;)] save(list=c(&quot;dat&quot;),file=file.path(&quot;data&quot;,&quot;outputs_for_modelling&quot;,file=&quot;PAdata.RData&quot;)) save(list=c(&quot;area&quot;),file=file.path(&quot;data&quot;,&quot;spatial&quot;,file=&quot;area.RData&quot;)) References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
